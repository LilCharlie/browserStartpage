{"version":3,"sources":["script.js"],"names":["document","addEventListener","getElementsByTagName","className","tabTrigger","getElementsByClassName","tabbedContent","length","console","log","setCurrentTab","newTabId","markTabTrigger","classList","add","unhideSelectedContent","localStorage","setItem","unsetTabs","i","remove","savedLocalStorageId","getItem","index","onclick"],"mappings":"AAGAA,SAASC,iBAAiB,mBAAoB,WAG7CD,SAASE,qBAAqB,QAAQ,GAAGC,WAAa,IAGtD,IAAIC,GAAaJ,SAASK,uBAAuB,OAC7CC,EAAgBN,SAASK,uBAAuB,iBACjDD,GAAWG,SAAWD,EAAcC,QACtCC,QAAQC,IAAI,oDAKb,IAAIC,GAAgB,SAASC,GAC5BC,eAAiBZ,SAASK,uBAAuB,OAAOM,GAAUE,UAAUC,IAAI,UAChFC,sBAAwBf,SAASK,uBAAuB,kBAAkBM,GAAUE,UAAUC,IAAI,UAClGE,aAAaC,QAAQ,kBAAmBN,GACxCH,QAAQC,IAAI,uBAAyBE,IAIlCO,EAAY,WACf,IAAIC,EAAE,EAAGA,EAAIb,EAAcC,OAAQY,IAClCf,EAAWe,GAAGN,UAAUO,OAAO,UAC/Bd,EAAca,GAAGN,UAAUO,OAAO,WAKhCC,EAAsBL,aAAaM,QAAQ,kBAS/C,KAR2B,OAAxBD,GAAgCjB,EAAWG,QAAUc,EACvDX,EAAcW,IAEdb,QAAQC,IAAI,6EACZC,EAAc,IAIXS,EAAE,EAAGA,EAAIf,EAAWG,OAAQY,KAC/B,SAAUI,GACTnB,EAAWe,GAAGK,QAAU,WAGvB,MAFAN,KACAR,EAAca,IACP,IAENJ","file":"script.js","sourcesContent":["// TODO: use data-target instead of elementIndex\n\n// is the DOM ready for manipulation?\ndocument.addEventListener('DOMContentLoaded', function() {\n\n\t// add JS to body-tag to allow CSS-Manipulation if JS is available\n\tdocument.getElementsByTagName(\"body\")[0].className += \"js\";\n\n\t// initially set Element-count of tabs and tabbedContent and check consistency\n\tvar tabTrigger = document.getElementsByClassName(\"tab\");\n\tvar tabbedContent = document.getElementsByClassName(\"tabbed-content\");\n\tif(tabTrigger.length !== tabbedContent.length) {\n\t\tconsole.log(\"count of tabs and tabbed-contend isn't consistent\");\n\t}\n\n\t// Tab-Handling-Function\n\t// -- set Current-Tab and tabbed-content\n\tvar setCurrentTab = function(newTabId) {\n\t\tmarkTabTrigger = document.getElementsByClassName(\"tab\")[newTabId].classList.add(\"active\");\n\t\tunhideSelectedContent = document.getElementsByClassName(\"tabbed-content\")[newTabId].classList.add(\"active\");\n\t\tlocalStorage.setItem(\"tabbedContentId\", newTabId);\n\t\tconsole.log(\"localStorage ID is: \" + newTabId);\n\t}\n\n\t// -- unset Current-Tab and tabbed-conent\n\tvar unsetTabs = function() {\n\t\tfor(i=0; i < tabbedContent.length; i++) {\n\t\t\ttabTrigger[i].classList.remove(\"active\");\n\t\t\ttabbedContent[i].classList.remove(\"active\");\n\t\t}\n\t}\n\n\t// -- if DOM is ready, check if localStorage is filled and stored Id is still available\n\tvar savedLocalStorageId = localStorage.getItem(\"tabbedContentId\");\n\tif(savedLocalStorageId !== null && tabTrigger.length >= savedLocalStorageId) {\n\t\tsetCurrentTab(savedLocalStorageId);\n\t} else {\n\t\tconsole.log(\"localStorage is empty or stored Id is no longer present - setting default\");\n\t\tsetCurrentTab(0);\n\t}\n\n\t// -- switch tabs onClick\n\tfor(i=0; i < tabTrigger.length; i++) {\n\t\t(function(index){\n\t\t\ttabTrigger[i].onclick = function(){\n\t\t\t\tunsetTabs();\n\t\t\t\tsetCurrentTab(index);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t})(i);\n\t}\n});\n"]}